/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

// hex inverter
module \7404  (
  input \1A ,
  input \2A ,
  input \3A ,
  input \4A ,
  input \5A ,
  input \6A ,
  input VCC,
  input GND,
  output \1Y ,
  output \2Y ,
  output \3Y ,
  output \4Y ,
  output \5Y ,
  output \6Y 
);
  assign \1Y  = ~ \1A ;
  assign \2Y  = ~ \2A ;
  assign \3Y  = ~ \3A ;
  assign \4Y  = ~ \4A ;
  assign \5Y  = ~ \5A ;
  assign \6Y  = ~ \6A ;
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_D_FF_AS_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input Set,
   input [(Bits-1):0] D,
   input C,
   input Clr,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= {Bits{1'b1}};
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



// hex synchronous counter, async clear
module \74161  (
  input \~LD ,
  input \~CLR ,
  input CLK,
  input ENT,
  input ENP,
  input A,
  input B,
  input C,
  input D,
  input VCC,
  input GND,
  output RCO,
  output QA,
  output QB,
  output QC,
  output QD
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire s2;
  wire s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire s7;
  assign s3 = (ENP & ENT);
  assign s5[0] = A;
  assign s5[1] = B;
  assign s5[2] = C;
  assign s5[3] = D;
  assign s7 = ~ \~CLR ;
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i0 (
    .sel( s3 ),
    .in_0( s0 ),
    .in_1( s1 ),
    .out( s4 )
  );
  assign RCO = (s2 & ENT);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( \~LD  ),
    .in_0( s5 ),
    .in_1( s4 ),
    .out( s6 )
  );
  DIG_D_FF_AS_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i2 (
    .Set( 1'b0 ),
    .D( s6 ),
    .C( CLK ),
    .Clr( s7 ),
    .Q( s0 )
  );
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i3 (
    .a( s0 ),
    .b( 4'b1 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  assign QA = s0[0];
  assign QB = s0[1];
  assign QC = s0[2];
  assign QD = s0[3];
endmodule

module w_74161 (
  input clk,
  input \~rst ,
  input en,
  input cin,
  input [3:0] din,
  input \~ld ,
  output [3:0] dout,
  output cout
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  assign s0 = din[0];
  assign s1 = din[1];
  assign s2 = din[2];
  assign s3 = din[3];
  \74161  \74161_i0 (
    .\~CLR ( \~rst  ),
    .CLK( clk ),
    .A( s0 ),
    .B( s1 ),
    .C( s2 ),
    .D( s3 ),
    .ENP( en ),
    .GND( 1'b0 ),
    .\~LD ( \~ld  ),
    .ENT( cin ),
    .VCC( 1'b1 ),
    .QD( s7 ),
    .QC( s6 ),
    .QB( s5 ),
    .QA( s4 ),
    .RCO( cout )
  );
  assign dout[0] = s4;
  assign dout[1] = s5;
  assign dout[2] = s6;
  assign dout[3] = s7;
endmodule

module dumb_op_card (
  input clk,
  input \~rst ,
  input \~int ,
  input VCC_5V,
  input GND,
  input VCC_3V3,
  input \~we ,
  input \~oe ,
  input [15:0] addr,
  input [7:0] \aux-bus ,
  output [7:0] data
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  assign s2 = addr[0];
  assign s3 = addr[1];
  assign s4 = addr[2];
  assign s5 = addr[3];
  \7404  \7404_i0 (
    .\1A ( s2 ),
    .\2A ( s3 ),
    .\3A ( s4 ),
    .GND( 1'b0 ),
    .\4A ( s5 ),
    .\5A ( 1'b0 ),
    .\6A ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( s6 ),
    .\2Y ( s7 ),
    .\3Y ( s8 ),
    .\4Y ( s9 )
  );
  assign s0[0] = s6;
  assign s0[1] = s7;
  assign s0[2] = s8;
  assign s0[3] = s9;
  w_74161 w_74161_i1 (
    .clk( clk ),
    .\~rst ( \~rst  ),
    .en( 1'b1 ),
    .cin( 1'b1 ),
    .din( s0 ),
    .\~ld ( \~we  ),
    .dout( s1 )
  );
  assign data[3:0] = s1;
  assign data[7:4] = s1;
endmodule
